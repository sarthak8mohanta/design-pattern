Builder Design Pattern - Properties
1. Creational design pattern
2. Used when we have too many arguments to send in Constructor & it's hard to maintain the order
3. When we don't want to send all parameters in Object initialisation.
   (Generally we send optional parameters as null)
   

Implementation:
1. We create a 'static nested class', which contains all arguments of outer class.
2. As per naming convention, if class name is 'Vehicle', builder class should be 'VehicleBuilder'.
3. Builder class have a public constructor with all required parameters.
4. Builder class should have methods for optional parameters. Method will return the Builder object.
5. A 'build()' method that will return the final object.
6. The main class 'Vehicle' has private constructor so to create instance only via Builder class.
7. The main class 'Vehicle' has only getters.